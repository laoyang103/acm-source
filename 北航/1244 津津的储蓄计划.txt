津津的储蓄计划
时间限制：1000 ms  |  内存限制：8192 KB 
描述 
津津的零花钱一直都是自己管理。每个月的月初妈妈给津津300元钱，津津会预算这个月的花销，并且总能做到实际花销和预算的相同。 为了让津津学习如何储蓄，妈妈提出，津津可以随时把整百的钱存在她那里，到了年末她会加上20%还给津津。因此津津制定了一个储蓄计划：每个月的月初，在得到妈妈给的零花钱后，如果她预计到这个月的月末手中还会有多于100元或恰好100元，她就会把整百的钱存在妈妈那里，剩余的钱留在自己手中。 例如11月初津津手中还有83元，妈妈给了津津300元。津津预计11月的花销是180元，那么她就会在妈妈那里存200元，自己留下183元。到了11 月月末，津津手中会剩下3元钱。 津津发现这个储蓄计划的主要风险是，存在妈妈那里的钱在年末之前不能取出。有可能在某个月的月初，津津手中的钱加上这个月妈妈给的钱，不够这个月的原定预算。如果出现这种情况，津津将不得不在这个月省吃俭用，压缩预算。现在请你根据2004年1月到12月每个月津津的预算，判断会不会出现这种情况。如果不会，计算到2004年年末，妈妈将津津平常存的钱加上20%还给津津之后，津津手中会有多少钱。

输入 
第一行输入一个整数T，表示有T组数据。
以下T组数据每组输入包括12行数据，每行包含一个小于350的非负整数，分别表示1月到12月津津的预算。

输出 
输出包括T行，每一行只包含一个整数，对应每组输入数据的输出。对每组输入数据，如果储蓄计划实施过程中出现某个月钱不够用的情况，输出-X，X表示出现这种情况的第一个月，否则输出到2004年年末津津手中会有多少钱。

样例输入 
1
290
230
280
200
300
170
340
50 
90 
80 
200
60
样例输出 
-7
来源 
NOIP 2004 

#include<iostream>
#include<algorithm>
#include<sstream>
#include<vector>
#include<iomanip>
#include<cmath>
using namespace std;
double max(double a,double b)
{
	if(a<b) return a;
	return b;
}
int main()
{
	int n;
	cin>>n;
	while(n--)
	{
		double a[13],rest=0,save=0;
		int i;
		for(i=1;i<=12;i++)
			cin>>a[i];
		int j=0;
		for(i=1;i<=12;i++)
		{
			if(rest+300-a[i]>=100)
			{
				save+=int((rest+300-a[i]))/100*100;
				rest=rest+300-a[i]-int((rest+300-a[i]))/100*100;
			}
			else if(rest+300-a[i]<0)
			{
				cout<<"-"<<i<<endl;
				j++;
				break;
			}
			else 
			{
				rest+=300-a[i];
			}
			//cout<<"rest:"<<rest<<endl;
			//cout<<"save:"<<save<<endl;
		}
		if(!j) {rest+=save*1.2;cout<<rest<<endl;}	
	}
	return 0;
}

